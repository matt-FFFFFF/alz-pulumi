// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure
{
    [AzureResourceType("azure:index:AlzArchitecture")]
    public partial class AlzArchitecture : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// The website URL.
        /// </summary>
        [Output("websiteUrl")]
        public Output<string> WebsiteUrl { get; private set; } = null!;


        /// <summary>
        /// Create a AlzArchitecture resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlzArchitecture(string name, AlzArchitectureArgs args, ComponentResourceOptions? options = null)
            : base("azure:index:AlzArchitecture", name, args ?? new AlzArchitectureArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class AlzArchitectureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the ALZ architecture from the library.
        /// </summary>
        [Input("architectureName", required: true)]
        public Input<string> ArchitectureName { get; set; } = null!;

        /// <summary>
        /// The default location of the architecture.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The root management group ID.
        /// </summary>
        [Input("rootManagementGroupId", required: true)]
        public Input<string> RootManagementGroupId { get; set; } = null!;

        public AlzArchitectureArgs()
        {
        }
        public static new AlzArchitectureArgs Empty => new AlzArchitectureArgs();
    }
}
