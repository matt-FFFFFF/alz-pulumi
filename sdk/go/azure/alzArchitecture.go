// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"errors"
	"github.com/matt-FFFFFF/pulumi-azure-alz/sdk/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlzArchitecture struct {
	pulumi.ResourceState

	// The website URL.
	WebsiteUrl pulumi.StringOutput `pulumi:"websiteUrl"`
}

// NewAlzArchitecture registers a new resource with the given unique name, arguments, and options.
func NewAlzArchitecture(ctx *pulumi.Context,
	name string, args *AlzArchitectureArgs, opts ...pulumi.ResourceOption) (*AlzArchitecture, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchitectureName == nil {
		return nil, errors.New("invalid value for required argument 'ArchitectureName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RootManagementGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RootManagementGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlzArchitecture
	err := ctx.RegisterRemoteComponentResource("azure:index:AlzArchitecture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type alzArchitectureArgs struct {
	// The name of the ALZ architecture from the library.
	ArchitectureName string `pulumi:"architectureName"`
	// The default location of the architecture.
	Location string `pulumi:"location"`
	// The root management group ID.
	RootManagementGroupId string `pulumi:"rootManagementGroupId"`
}

// The set of arguments for constructing a AlzArchitecture resource.
type AlzArchitectureArgs struct {
	// The name of the ALZ architecture from the library.
	ArchitectureName pulumi.StringInput
	// The default location of the architecture.
	Location pulumi.StringInput
	// The root management group ID.
	RootManagementGroupId pulumi.StringInput
}

func (AlzArchitectureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alzArchitectureArgs)(nil)).Elem()
}

type AlzArchitectureInput interface {
	pulumi.Input

	ToAlzArchitectureOutput() AlzArchitectureOutput
	ToAlzArchitectureOutputWithContext(ctx context.Context) AlzArchitectureOutput
}

func (*AlzArchitecture) ElementType() reflect.Type {
	return reflect.TypeOf((**AlzArchitecture)(nil)).Elem()
}

func (i *AlzArchitecture) ToAlzArchitectureOutput() AlzArchitectureOutput {
	return i.ToAlzArchitectureOutputWithContext(context.Background())
}

func (i *AlzArchitecture) ToAlzArchitectureOutputWithContext(ctx context.Context) AlzArchitectureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlzArchitectureOutput)
}

// AlzArchitectureArrayInput is an input type that accepts AlzArchitectureArray and AlzArchitectureArrayOutput values.
// You can construct a concrete instance of `AlzArchitectureArrayInput` via:
//
//	AlzArchitectureArray{ AlzArchitectureArgs{...} }
type AlzArchitectureArrayInput interface {
	pulumi.Input

	ToAlzArchitectureArrayOutput() AlzArchitectureArrayOutput
	ToAlzArchitectureArrayOutputWithContext(context.Context) AlzArchitectureArrayOutput
}

type AlzArchitectureArray []AlzArchitectureInput

func (AlzArchitectureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlzArchitecture)(nil)).Elem()
}

func (i AlzArchitectureArray) ToAlzArchitectureArrayOutput() AlzArchitectureArrayOutput {
	return i.ToAlzArchitectureArrayOutputWithContext(context.Background())
}

func (i AlzArchitectureArray) ToAlzArchitectureArrayOutputWithContext(ctx context.Context) AlzArchitectureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlzArchitectureArrayOutput)
}

// AlzArchitectureMapInput is an input type that accepts AlzArchitectureMap and AlzArchitectureMapOutput values.
// You can construct a concrete instance of `AlzArchitectureMapInput` via:
//
//	AlzArchitectureMap{ "key": AlzArchitectureArgs{...} }
type AlzArchitectureMapInput interface {
	pulumi.Input

	ToAlzArchitectureMapOutput() AlzArchitectureMapOutput
	ToAlzArchitectureMapOutputWithContext(context.Context) AlzArchitectureMapOutput
}

type AlzArchitectureMap map[string]AlzArchitectureInput

func (AlzArchitectureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlzArchitecture)(nil)).Elem()
}

func (i AlzArchitectureMap) ToAlzArchitectureMapOutput() AlzArchitectureMapOutput {
	return i.ToAlzArchitectureMapOutputWithContext(context.Background())
}

func (i AlzArchitectureMap) ToAlzArchitectureMapOutputWithContext(ctx context.Context) AlzArchitectureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlzArchitectureMapOutput)
}

type AlzArchitectureOutput struct{ *pulumi.OutputState }

func (AlzArchitectureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlzArchitecture)(nil)).Elem()
}

func (o AlzArchitectureOutput) ToAlzArchitectureOutput() AlzArchitectureOutput {
	return o
}

func (o AlzArchitectureOutput) ToAlzArchitectureOutputWithContext(ctx context.Context) AlzArchitectureOutput {
	return o
}

// The website URL.
func (o AlzArchitectureOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AlzArchitecture) pulumi.StringOutput { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type AlzArchitectureArrayOutput struct{ *pulumi.OutputState }

func (AlzArchitectureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlzArchitecture)(nil)).Elem()
}

func (o AlzArchitectureArrayOutput) ToAlzArchitectureArrayOutput() AlzArchitectureArrayOutput {
	return o
}

func (o AlzArchitectureArrayOutput) ToAlzArchitectureArrayOutputWithContext(ctx context.Context) AlzArchitectureArrayOutput {
	return o
}

func (o AlzArchitectureArrayOutput) Index(i pulumi.IntInput) AlzArchitectureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlzArchitecture {
		return vs[0].([]*AlzArchitecture)[vs[1].(int)]
	}).(AlzArchitectureOutput)
}

type AlzArchitectureMapOutput struct{ *pulumi.OutputState }

func (AlzArchitectureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlzArchitecture)(nil)).Elem()
}

func (o AlzArchitectureMapOutput) ToAlzArchitectureMapOutput() AlzArchitectureMapOutput {
	return o
}

func (o AlzArchitectureMapOutput) ToAlzArchitectureMapOutputWithContext(ctx context.Context) AlzArchitectureMapOutput {
	return o
}

func (o AlzArchitectureMapOutput) MapIndex(k pulumi.StringInput) AlzArchitectureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlzArchitecture {
		return vs[0].(map[string]*AlzArchitecture)[vs[1].(string)]
	}).(AlzArchitectureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlzArchitectureInput)(nil)).Elem(), &AlzArchitecture{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlzArchitectureArrayInput)(nil)).Elem(), AlzArchitectureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlzArchitectureMapInput)(nil)).Elem(), AlzArchitectureMap{})
	pulumi.RegisterOutputType(AlzArchitectureOutput{})
	pulumi.RegisterOutputType(AlzArchitectureArrayOutput{})
	pulumi.RegisterOutputType(AlzArchitectureMapOutput{})
}
